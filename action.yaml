name: paloaltonetworks/cov

description: Very simple action to run code coverage checking for go projects.

inputs:
  main_branch:
    description: The main branch name.
    required: true
    default: main
  cov_mode:
    description: Running mode. Either 'coverage', 'send-status' or 'both'.
    required: true
    default: coverage
  cov_file:
    description: The name of the coverage file to use.
    required: true
    default: coverage.out
  cov_threshold:
    description: Default required coverage percentage.
    default: "90"
  cov_version:
    description: The version to use for cov.
    required: true
    default: ${{github.action_ref}}
  workflow_run_id:
    description: |
      In mode 'send-status', pass the workflow id that generated the cov report.
  workflow_head_sha:
    description: |
      In mode 'send-status', pass the workflow head_sha.

runs:
  using: 'composite'

  ## common steps
  steps:
  - name: setup
    shell: bash
    run: go install github.com/PaloAltoNetworks/cov@${{inputs.cov_version}}

  ## coverage report generation
  - name: coverage
    if: inputs.cov_mode == 'coverage' || inputs.cov_mode == 'both'
    shell: bash
    run: |
      echo "* main_branch: ${{inputs.main_branch}}"
      echo "* cov_version: ${{inputs.cov_version}}"
      echo "* cov_threshold: ${{inputs.cov_threshold}}"
      echo "* cov_file: ${{inputs.cov_file}}"
      echo "* head_ref: ${{github.head_ref}}"
      echo "* base_ref: ${{github.base_ref}}"
      echo "* sha: ${{github.sha}}"
      echo "* repo: ${{github.repositoryUrl}}"
      echo "* event repo: ${{github.event.pull_request.head.repo.clone_url}}"

      REPO_URL="${{github.repositoryUrl}}"
      REPO_URL="${REPO_URL//git:\/\//https:\/\/}"

      EVENT_REPO_URL="${{github.event.pull_request.head.repo.clone_url}}"
      EVENT_REPO_URL="${EVENT_REPO_URL//git:\/\//https:\/\/}"

      EVENT_REPO_NAME="${{github.event.pull_request.head.repo.full_name}}"
      EVENT_REPO_NAME=${EVENT_REPO_NAME//\//-}

      SHA="${{github.sha}}"

      if [[ "${{github.head_ref}}" != "" ]]; then
        if [[ "${{github.head_ref}}" != "${{inputs.main_branch}}" ]]; then

          git remote set-url origin "${REPO_URL}"
          git fetch origin ${{github.base_ref}}

          git remote add "${EVENT_REPO_NAME}" "${EVENT_REPO_URL}"
          git fetch "${EVENT_REPO_NAME}" "${{github.head_ref}}"
          git checkout "${EVENT_REPO_NAME}/${{github.head_ref}}"

          SHA="$(git log -n 1 --pretty=format:"%H" ${EVENT_REPO_NAME}/${{github.head_ref}})"
          BRANCH_ARG="-b origin/${{github.base_ref}}"
        fi
      fi

      /home/runner/go/bin/cov $BRANCH_ARG \
          -e 0 \
          -t ${{inputs.cov_threshold}} \
          ${{inputs.cov_file}}

  - uses: actions/upload-artifact@v3
    if: inputs.cov_mode == 'coverage'
    with:
      name: cov.report
      path: cov.report

  ### upload report as status check
  - name: download-report
    if: inputs.cov_mode == 'send-status'
    uses: actions/github-script@v3.1.0
    with:
      script: |
        var artifacts = await github.actions.listWorkflowRunArtifacts({
           owner: context.repo.owner,
           repo: context.repo.repo,
           run_id: ${{inputs.workflow_run_id}},
        });
        var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
          return artifact.name == "cov.report"
        })[0];
        var download = await github.actions.downloadArtifact({
           owner: context.repo.owner,
           repo: context.repo.repo,
           artifact_id: matchArtifact.id,
           archive_format: 'zip',
        });
        var fs = require('fs');
        fs.writeFileSync('${{github.workspace}}/cov.report.zip', Buffer.from(download.data));

  - name: unzip-report
    if: inputs.cov_mode == 'send-status'
    shell: bash
    run: unzip cov.report.zip

  - name: upload-report
    if: inputs.cov_mode == 'send-status' || inputs.cov_mode == 'both'
    shell: bash
    run: |
      /home/runner/go/bin/cov \
        --send-repo "${{github.repository}}@${{inputs.workflow_head_sha}}" \
        --send-token "${{github.token}}"
